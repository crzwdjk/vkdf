#version 450

#extension GL_ARB_separate_shader_objects : enable

const int MAX_MATERIALS_PER_MODEL = 32;
const int MAX_MODELS = 128;

INCLUDE(../../data/glsl/lighting-float16.glsl)

layout(std140, set = 1, binding = 1) uniform material_ubo
{
   Material materials[MAX_MATERIALS_PER_MODEL * MAX_MODELS];
} Mat;

layout(std140, set = 2, binding = 0) uniform light_ubo
{
   Light sun;
} L;

struct ShadowMapData {
   mat4 light_viewproj;
   uint shadow_map_size;
   uint pfc_kernel_size; /* Overriden by specialization constant */
};

layout (constant_id = 0) const int SHADOW_MAP_PCF_KERNEL_SIZE = 2;

layout(std140, set = 2, binding = 1) uniform ubo_shadow_map_data {
   ShadowMapData shadow_map_data;
} SMD;

layout(set = 3, binding = 0) uniform sampler2DShadow shadow_map;

layout(set = 4, binding = 0) uniform sampler2D tex_diffuse;
layout(set = 4, binding = 1) uniform sampler2D tex_normal;
layout(set = 4, binding = 2) uniform sampler2D tex_specular;
layout(set = 4, binding = 3) uniform sampler2D tex_opacity;

layout(location = 0) in vec2 in_uv;
layout(location = 1) flat in uint in_material_idx;
layout(location = 2) in vec3 in_eye_normal;
layout(location = 3) in vec4 in_eye_pos;
layout(location = 4) in vec3 in_eye_view_dir;
layout(location = 5) in vec4 in_eye_light_pos;
layout(location = 6) in vec4 in_light_space_pos;
layout(location = 7) in vec3 in_eye_tangent;
layout(location = 8) in vec3 in_eye_bitangent;
layout(location = 9) in vec3 in_debug;

layout(location = 0) out vec4 out_color;

void main()
{
   /* Always sample opacity from LOD 0: mipmaps can have non 1.0 values for
    * visible pixels as a result of filtering.
    */
   float opacity = textureLod(tex_opacity, in_uv, 0).r;
   if (opacity < 0.8) {
      discard;
   } else {
      INCLUDE(compute_forward_lighting.glsl)
   }
}
